require 'provisioning-tools/util/namespace'
require 'set'

class Util::VirshDomainXmlDiffer
  attr_reader :differences

  def initialize(expected, actual)
    @differences = []

    require "rexml/document"
    expected = REXML::Document.new(expected)
    actual = REXML::Document.new(actual)

    # remove autogenerated attributes from the actual so that they don't show up in the diff
    remove_xml!(actual, '/domain/@id')                            # generated vm id
    remove_xml!(actual, '/domain/os/type/@machine')               # generated machine type
    remove_xml!(actual, '/domain/devices/interface/mac/@address') # generated mac addresses of interfaces
    remove_xml!(actual, '/domain/devices/console/@tty')           # generated console tty
    remove_xml!(actual, '/domain/devices/graphics/@port')         # auto-assigned graphics port
    remove_xml!(actual, '/domain/devices/graphics/@autoport')     # auto-assigned graphics port

    # remove autogenerated elements from the actual so that they don't show up in the diff
    remove_xml!(actual, '/domain/uuid')                     # generated vm uuid
    remove_xml!(actual, '/domain/resource')                 # we use default resource partition
    remove_xml!(actual, '/domain/seclabel')                 # generated security labels for apparmor
    remove_xml!(actual, '/domain/devices/video/alias')      # generated video alias
    remove_xml!(actual, '/domain/devices/video/address')    # generated video address
    remove_xml!(actual, '/domain/devices/disk/alias')       # generated disk alias
    remove_xml!(actual, '/domain/devices/disk/address')     # generated disk address
    remove_xml!(actual, '/domain/devices/console/alias')    # generated console alias
    remove_xml!(actual, '/domain/devices/console/address')  # generated console address
    remove_xml!(actual, '/domain/devices/console/source')   # generated console source
    remove_xml!(actual, '/domain/devices/interface/alias')  # generated interface alias
    remove_xml!(actual, '/domain/devices/interface/target') # generated interface target, next available on host
    remove_xml!(actual, '/domain/devices/memballoon')       # always added back automatically, despite us disabling
    remove_xml!(actual, '/domain/devices/serial/source')    # auto-allocated serial source (e.g. /dev/pts/17)
    remove_xml!(actual, '/domain/devices/controller')       # ignore all controllers

    # remove specialist elements from actual so that they don't show up in the diff
    remove_xml!(actual, '/domain/devices/input[@type="keyboard"]') # keyboard is auto-added

    # remove generated things from expected so that they don't show up in the diff
    remove_xml!(expected, '/domain/devices/controller')             # ignore all controllers
    remove_xml!(expected, '/domain/devices/interface/mac/@address') # generated mac addresses of interfaces
    remove_xml!(expected, '/domain/devices/graphics/@port')         # auto-assigned graphics port

    diff_element(expected.root, actual.root)
  end

  private

  def remove_xml!(document, xpath)
    REXML::XPath.match(document, xpath).each(&:remove)
  end

  def diff_element(exp, act, path = "")
    nodepath = "#{path}/#{exp.name}"

    if exp.name != act.name
      @differences.push("Node name difference. Expected: #{nodepath} Actual: #{path}/#{act.name}")
      return
    end

    diff_text(exp, act, nodepath)
    diff_attributes(exp.attributes, act.attributes, nodepath)
    diff_elements(exp.elements, act.elements, nodepath)
  end

  def diff_text(exp, act, path)
    exp_text = exp.has_text? ? exp.get_text.value.strip : ""
    act_text = act.has_text? ? act.get_text.value.strip : ""
    @differences.push("Node value difference. Expected #{path}" \
                      " to have #{exp.has_text? ? "text \"#{exp.get_text.value}\"" : 'no text'}," \
                      " but it has #{act.has_text? ? "text \"#{act.get_text.value}\"" : 'no text'}.") \
                      if exp_text != act_text
  end

  def diff_attributes(exp, act, path)
    names = Set[]
    exp.each do |name, _|
      names.add(name)
    end
    act.each do |name, _|
      names.add(name)
    end
    names.each { |name| diff_attribute(name, exp[name], act[name], path) }
  end

  def diff_attribute(name, exp, act, path)
    @differences.push("Attribute difference. Expected #{path}" \
                      " to have #{exp.nil? ? "no attribute \"#{name}\"" : "attribute \"#{name}=#{exp}\""}," \
                      " but it has #{act.nil? ? "no attribute \"#{name}\"" : "attribute \"#{name}=#{act}\""}.") \
                      if exp != act
  end

  def diff_elements(exp, act, path)
    exp_names = exp.map(&:name)
    act_names = act.map(&:name)
    names = exp_names.to_set + act_names.to_set

    exp_counts = exp_names.group_by { |a| a }.map { |a, b| [a, b.size] }.to_h
    act_counts = act_names.group_by { |a| a }.map { |a, b| [a, b.size] }.to_h
    counts = names.map { |name| [name, exp_counts.fetch(name, 0), act_counts.fetch(name, 0)] }

    diffs = counts.select { |v| v[1] != v[2] }
    diffs.each do |diff|
      diff_type = diff[1] > diff[2] ? "Missing" : "Unexpected"
      @differences.push "#{diff_type} element \"#{path}/#{diff[0]}\" (expected #{diff[1]}, actual #{diff[2]})."
    end

    sames = counts.select { |v| v[1] == v[2] }.map { |same| same[0] }
    sames.to_set.each { |name| exp.to_a(name).zip(act.to_a(name)).each { |e, a| diff_element(e, a, path) } }
  end
end
